PS C:\#Master\AI\YogaPoseDetection> & C:/ProgramData/anaconda3/python.exe c:/#Master/AI/YogaPoseDetection/CNN/Tensorflow/tf_model
2024-07-17 19:11:31.641154: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-07-17 19:11:32.567368: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Found 1831 images belonging to 47 classes.
Found 431 images belonging to 47 classes.
2024-07-17 19:11:35.340065: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
C:\Users\lukas\AppData\Roaming\Python\Python311\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Epoch 1/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 29s 489ms/step - accuracy: 0.0199 - loss: 3.8844 - val_accuracy: 0.0385 - val_loss: 3.8401
Epoch 2/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 397ms/step - accuracy: 0.0420 - loss: 3.8511 - val_accuracy: 0.0426 - val_loss: 3.8280
Epoch 3/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 390ms/step - accuracy: 0.0388 - loss: 3.7887 - val_accuracy: 0.0501 - val_loss: 3.7981
Epoch 4/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 386ms/step - accuracy: 0.0361 - loss: 3.8831 - val_accuracy: 0.0602 - val_loss: 3.7702
Epoch 5/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 21s 377ms/step - accuracy: 0.0357 - loss: 3.8133 - val_accuracy: 0.0526 - val_loss: 3.6778
Epoch 6/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 394ms/step - accuracy: 0.0547 - loss: 3.7971 - val_accuracy: 0.0852 - val_loss: 3.6674
Epoch 7/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 397ms/step - accuracy: 0.0581 - loss: 3.7677 - val_accuracy: 0.1028 - val_loss: 3.6037
Epoch 8/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 394ms/step - accuracy: 0.0746 - loss: 3.4685 - val_accuracy: 0.1378 - val_loss: 3.5053
Epoch 9/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 396ms/step - accuracy: 0.0850 - loss: 3.5336 - val_accuracy: 0.1178 - val_loss: 3.4006
Epoch 10/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 399ms/step - accuracy: 0.0925 - loss: 3.6943 - val_accuracy: 0.1679 - val_loss: 3.3651
Epoch 11/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 396ms/step - accuracy: 0.1021 - loss: 3.5438 - val_accuracy: 0.1654 - val_loss: 3.3329
Epoch 12/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 396ms/step - accuracy: 0.0975 - loss: 3.4531 - val_accuracy: 0.2080 - val_loss: 3.2730
Epoch 13/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 395ms/step - accuracy: 0.1124 - loss: 3.3591 - val_accuracy: 0.2080 - val_loss: 3.2320
Epoch 14/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 398ms/step - accuracy: 0.0958 - loss: 3.3713 - val_accuracy: 0.2105 - val_loss: 3.1737
Epoch 15/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 393ms/step - accuracy: 0.1203 - loss: 3.3815 - val_accuracy: 0.2500 - val_loss: 3.0263
Epoch 16/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 386ms/step - accuracy: 0.1587 - loss: 3.2437 - val_accuracy: 0.2356 - val_loss: 3.0774
Epoch 17/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 389ms/step - accuracy: 0.1638 - loss: 3.2899 - val_accuracy: 0.2030 - val_loss: 3.0975
Epoch 18/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 408ms/step - accuracy: 0.1520 - loss: 3.2097 - val_accuracy: 0.2381 - val_loss: 2.9588
Epoch 19/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 400ms/step - accuracy: 0.1593 - loss: 3.2071 - val_accuracy: 0.2381 - val_loss: 2.9248
Epoch 20/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 21s 379ms/step - accuracy: 0.1862 - loss: 3.1621 - val_accuracy: 0.2882 - val_loss: 2.9424
Epoch 21/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 403ms/step - accuracy: 0.1800 - loss: 3.1397 - val_accuracy: 0.2581 - val_loss: 2.8196
Epoch 22/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 384ms/step - accuracy: 0.1714 - loss: 3.1456 - val_accuracy: 0.2607 - val_loss: 2.8807
Epoch 23/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 406ms/step - accuracy: 0.1876 - loss: 3.1781 - val_accuracy: 0.3008 - val_loss: 2.8152
Epoch 24/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 400ms/step - accuracy: 0.2056 - loss: 2.9332 - val_accuracy: 0.2982 - val_loss: 2.6522
Epoch 25/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 380ms/step - accuracy: 0.2082 - loss: 3.0746 - val_accuracy: 0.3058 - val_loss: 2.6557
Epoch 26/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 390ms/step - accuracy: 0.1868 - loss: 3.1262 - val_accuracy: 0.3083 - val_loss: 2.7257
Epoch 27/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 403ms/step - accuracy: 0.1988 - loss: 2.9613 - val_accuracy: 0.3108 - val_loss: 2.6096
Epoch 28/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 402ms/step - accuracy: 0.2183 - loss: 2.8785 - val_accuracy: 0.3283 - val_loss: 2.6087
Epoch 29/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 384ms/step - accuracy: 0.2096 - loss: 2.9047 - val_accuracy: 0.3053 - val_loss: 2.6598
Epoch 30/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 401ms/step - accuracy: 0.2315 - loss: 2.9194 - val_accuracy: 0.3484 - val_loss: 2.4887
Epoch 31/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 386ms/step - accuracy: 0.2304 - loss: 2.8678 - val_accuracy: 0.3158 - val_loss: 2.6225
Epoch 32/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 395ms/step - accuracy: 0.2334 - loss: 2.7550 - val_accuracy: 0.3434 - val_loss: 2.5918
Epoch 33/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 393ms/step - accuracy: 0.2325 - loss: 2.8857 - val_accuracy: 0.2982 - val_loss: 2.5039
Epoch 34/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 404ms/step - accuracy: 0.2527 - loss: 2.8177 - val_accuracy: 0.3885 - val_loss: 2.4550
Epoch 35/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 384ms/step - accuracy: 0.2312 - loss: 2.8242 - val_accuracy: 0.3283 - val_loss: 2.5334
Epoch 36/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 409ms/step - accuracy: 0.2682 - loss: 2.7684 - val_accuracy: 0.3810 - val_loss: 2.3861
Epoch 37/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 21s 376ms/step - accuracy: 0.2528 - loss: 2.8059 - val_accuracy: 0.3283 - val_loss: 2.5060
Epoch 38/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 389ms/step - accuracy: 0.2362 - loss: 2.7649 - val_accuracy: 0.3283 - val_loss: 2.5009
Epoch 39/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 407ms/step - accuracy: 0.2706 - loss: 2.7364 - val_accuracy: 0.4035 - val_loss: 2.3242
Epoch 40/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 395ms/step - accuracy: 0.2649 - loss: 2.7363 - val_accuracy: 0.3709 - val_loss: 2.3111
Epoch 41/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 381ms/step - accuracy: 0.2824 - loss: 2.6672 - val_accuracy: 0.3885 - val_loss: 2.3468
Epoch 42/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 395ms/step - accuracy: 0.2695 - loss: 2.5937 - val_accuracy: 0.3584 - val_loss: 2.4544
Epoch 43/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 23s 401ms/step - accuracy: 0.2646 - loss: 2.6337 - val_accuracy: 0.4087 - val_loss: 2.2543
Epoch 44/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 381ms/step - accuracy: 0.2900 - loss: 2.6060 - val_accuracy: 0.3734 - val_loss: 2.3773
Epoch 45/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 394ms/step - accuracy: 0.2937 - loss: 2.6228 - val_accuracy: 0.3634 - val_loss: 2.4044
Epoch 46/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 394ms/step - accuracy: 0.3083 - loss: 2.6015 - val_accuracy: 0.3734 - val_loss: 2.3963
Epoch 47/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 392ms/step - accuracy: 0.3089 - loss: 2.5750 - val_accuracy: 0.4060 - val_loss: 2.2945
Epoch 48/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 395ms/step - accuracy: 0.3033 - loss: 2.5395 - val_accuracy: 0.3835 - val_loss: 2.3576
Epoch 49/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 392ms/step - accuracy: 0.3104 - loss: 2.5496 - val_accuracy: 0.4010 - val_loss: 2.2988
Epoch 50/50
57/57 ━━━━━━━━━━━━━━━━━━━━ 22s 390ms/step - accuracy: 0.3218 - loss: 2.4804 - val_accuracy: 0.3609 - val_loss: 2.2998
C:\Users\lukas\AppData\Roaming\Python\Python311\site-packages\keras\src\trainers\data_adapters\py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
14/14 ━━━━━━━━━━━━━━━━━━━━ 4s 267ms/step - accuracy: 0.3886 - loss: 2.3259
Validation accuracy: 36.89%
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.